{"version":3,"sources":["utils/API.js","Components/Article/index.js","Components/Saved/index.js","reducers.js","store.js","Components/Search/index.js","App.js","reportWebVitals.js","index.js"],"names":["search","axios","get","Article","stories","useSelector","state","searchArticle","length","map","story","Card","Body","href","url","title","story_text","Saved","savedSearch","addSearch","query","initialState","article","combineReducers","action","type","id","results","configureStore","reducer","Search","useState","setSearch","Jumbotron","className","name","placeholder","onChange","e","target","value","onClick","preventDefault","store","dispatch","API","then","res","data","hits","App","Container","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gOAIe,EACA,SAASA,GAChB,OAAOC,IAAMC,IAAN,oDAAuDF,K,sBCsBvDG,EAxBC,WAEZ,IAAMC,EAAUC,aAAY,SAACC,GAAD,OAAWA,EAAMC,iBAE7C,OACI,8BACKH,EAAQI,OAAS,EACdJ,EAAQK,KAAI,SAACC,GAAD,OACR,cAACC,EAAA,EAAD,UACI,eAACA,EAAA,EAAKC,KAAN,WACI,mBAAGC,KAAMH,EAAMI,IAAf,SACI,6BAAKJ,EAAMK,UAEf,4BAAIL,EAAMM,qBAKtB,wDCFDC,EAjBD,WAEV,IAAMC,EAAcb,aAAY,SAACC,GAAD,OAAWA,EAAMa,aAEjD,OACI,8BACCD,EAAYV,OAAS,EAClBU,EAAYT,KAAI,SAACT,GAAD,OACZ,4BAAIA,EAAOoB,WAGX,sD,uBCVVC,EAAe,CACjBC,QAAS,GACTtB,OAAQ,IA0BKuB,cAAgB,CAC7BJ,UAvBc,WAA4C,IAA1Cb,EAAyC,uDAAjCe,EAAarB,OAAQwB,EAAY,uCACzD,OAAQA,EAAOC,MACX,IAAK,cACD,MAAM,GAAN,mBAAWnB,GAAX,CAAkB,CAACoB,GAAIF,EAAOE,GAAIN,MAAOI,EAAOJ,SAEpD,QACI,OAAOd,IAiBJC,cAZO,WAA6C,IAA3CD,EAA0C,uDAAlCe,EAAaC,QAASE,EAAY,uCAC9D,OAAQA,EAAOC,MACX,IAAK,iBACD,OAAOD,EAAOG,QAElB,QACI,OAAOrB,MCxBJsB,cAAe,CAAEC,YC+DjBC,EAzDA,WAAM,MAEWC,qBAFX,mBAEV/B,EAFU,KAEFgC,EAFE,KA4BjB,OACI,gCACI,eAACC,EAAA,EAAD,CAAWC,UAAU,eAArB,UACI,wDACA,gEACA,iCACI,uBACAC,KAAK,SACLV,KAAK,OACLW,YAAY,0BACZC,SAjCC,SAACC,GACdN,EAAUM,EAAEC,OAAOC,UAkCP,wBACAf,KAAK,SACLgB,QAjCG,SAACH,GAChBA,EAAEI,iBAEFC,EAAMC,SAAS,CACXnB,KAAM,cACNL,MAAOpB,IAIX6C,EAAc7C,GAAQ8C,MAAK,SAACC,GACxBJ,EAAMC,SAAS,CACXnB,KAAM,iBACNE,QAASoB,EAAIC,KAAKC,WAmBd,wBAKJ,iDACA,cAAC,EAAD,OAGJ,eAAChB,EAAA,EAAD,WACI,yCACA,cAAC,EAAD,W,cC/CDiB,MARf,WACE,OACE,cAACC,EAAA,EAAD,UACE,cAAC,EAAD,OCISC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBR,MAAK,YAAkD,IAA/CS,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCCdO,IAASC,OACP,cAAC,IAAD,CAAUlB,MAAOA,EAAjB,SACE,cAAC,IAAMmB,WAAP,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.db40a868.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\n//Set up API call to get search results from hacker news API\r\n\r\nexport default {\r\n    getSearch: function(search) {\r\n        return axios.get(`http://hn.algolia.com/api/v1/search?query=${search}`);\r\n    }\r\n};","import React from \"react\";\r\nimport { Card } from \"react-bootstrap\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst Article = () => {\r\n    //Grab our articles from our Redux state\r\n    const stories = useSelector((state) => state.searchArticle)\r\n\r\n    return (\r\n        <div>\r\n            {stories.length > 0 ? (\r\n                stories.map((story) => (\r\n                    <Card>\r\n                        <Card.Body>\r\n                            <a href={story.url}>\r\n                                <h5>{story.title}</h5>\r\n                            </a>\r\n                            <p>{story.story_text}</p>\r\n                        </Card.Body>\r\n                    </Card>\r\n                ))\r\n            ) : (\r\n                <p>No Matching Articles</p>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Article;","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst Saved = () => {\r\n    //Grab our recent searches from our Redux state\r\n    const savedSearch = useSelector((state) => state.addSearch);\r\n\r\n    return (\r\n        <div>\r\n        {savedSearch.length > 0 ? (\r\n            savedSearch.map((search) => (\r\n                <p>{search.query}</p>\r\n            ))\r\n            ) : (\r\n                <p>No Recent Searches</p>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Saved;","import { combineReducers } from \"redux\";\r\nimport { SAVE_SEARCH, SEARCH_ARTICLE } from \"./actions\";\r\n\r\n//set up initialization of state\r\nconst initialState = {\r\n    article: {},\r\n    search: [],\r\n  };\r\n\r\n//Reducer for saving searches to the state, will return with default value of state if nothing is passed\r\nconst addSearch = ( state = initialState.search, action ) => {\r\n    switch (action.type) {\r\n        case \"SAVE_SEARCH\":\r\n            return [...state, {id: action.id, query: action.query }];\r\n\r\n        default:\r\n            return state;\r\n    };\r\n};\r\n\r\n//Reducer for searching for articles\r\nconst searchArticle = ( state = initialState.article, action ) => {\r\n    switch (action.type) {\r\n        case \"SEARCH_ARTICLE\":\r\n            return action.results;\r\n\r\n        default:\r\n            return state;\r\n    };\r\n};\r\n\r\n  \r\n  export default combineReducers({\r\n    addSearch, searchArticle\r\n  });\r\n  ","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport reducer from \"./reducers\";\r\n\r\nexport default configureStore({ reducer });","import React, { useState } from \"react\";\r\nimport { Jumbotron } from \"react-bootstrap\";\r\nimport API from \"../../utils/API\";\r\n\r\nimport Article from \"../Article/index\";\r\nimport Saved from \"../Saved/index\";\r\n\r\nimport store from \"../../store\";\r\n\r\nconst Search = () => {\r\n    //Set up state for this page to register key logs and so we can send it to Redux on submit\r\n    const [search, setSearch] = useState();\r\n\r\n    //Save keyboard inputs into search bar to state to use later for API calls and Redux\r\n    const onChange = (e) => {\r\n        setSearch(e.target.value);\r\n    };\r\n\r\n    const submitForm = (e) => {\r\n        e.preventDefault();\r\n        //Save current search to state through Redux\r\n        store.dispatch({\r\n            type: \"SAVE_SEARCH\",\r\n            query: search \r\n        });\r\n\r\n        //Perform API call and then save results to state through Redux\r\n        API.getSearch(search).then((res) => {\r\n            store.dispatch({\r\n                type: \"SEARCH_ARTICLE\",\r\n                results: res.data.hits\r\n            });\r\n        });\r\n\r\n    };\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Jumbotron className=\"jumbo-shadow\">\r\n                <h1>Hacker News API Search</h1>\r\n                <h4>Enter a search to get started!</h4>\r\n                <form>\r\n                    <input\r\n                    name=\"search\"\r\n                    type=\"text\"\r\n                    placeholder=\"search through the news\"\r\n                    onChange={onChange}\r\n                    />\r\n                    <button\r\n                    type=\"submit\"\r\n                    onClick={submitForm}>Search!</button>\r\n                </form>\r\n\r\n                <h4>Recent Searches</h4>\r\n                <Saved />\r\n            </Jumbotron>\r\n\r\n            <Jumbotron>\r\n                <h4>Results</h4>\r\n                <Article />\r\n            </Jumbotron>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Search;","import React from \"react\";\nimport Search from \"./Components/Search/index\";\nimport { Container } from \"react-bootstrap\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <Container>\n      <Search />\n    </Container>\n  )\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}